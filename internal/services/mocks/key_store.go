// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/services (interfaces: KeyStore)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/key_store.go -package=mocks Keyline/internal/services KeyStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	config "Keyline/internal/config"
	services "Keyline/internal/services"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeyStore is a mock of KeyStore interface.
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
	isgomock struct{}
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore.
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance.
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockKeyStore) Load(virtualServerName string, algorithm config.SigningAlgorithm) (services.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", virtualServerName, algorithm)
	ret0, _ := ret[0].(services.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockKeyStoreMockRecorder) Load(virtualServerName, algorithm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockKeyStore)(nil).Load), virtualServerName, algorithm)
}

// Store mocks base method.
func (m *MockKeyStore) Store(virtualServerName string, keyPair services.KeyPair) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", virtualServerName, keyPair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockKeyStoreMockRecorder) Store(virtualServerName, keyPair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKeyStore)(nil).Store), virtualServerName, keyPair)
}
