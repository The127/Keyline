// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/repositories (interfaces: OutboxMessageRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/outboxmessage_repository.go -package=mocks Keyline/internal/repositories OutboxMessageRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockOutboxMessageRepository is a mock of OutboxMessageRepository interface.
type MockOutboxMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxMessageRepositoryMockRecorder is the mock recorder for MockOutboxMessageRepository.
type MockOutboxMessageRepositoryMockRecorder struct {
	mock *MockOutboxMessageRepository
}

// NewMockOutboxMessageRepository creates a new mock instance.
func NewMockOutboxMessageRepository(ctrl *gomock.Controller) *MockOutboxMessageRepository {
	mock := &MockOutboxMessageRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxMessageRepository) EXPECT() *MockOutboxMessageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOutboxMessageRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOutboxMessageRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOutboxMessageRepository)(nil).Delete), ctx, id)
}

// Insert mocks base method.
func (m *MockOutboxMessageRepository) Insert(ctx context.Context, outboxMessage *repositories.OutboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, outboxMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOutboxMessageRepositoryMockRecorder) Insert(ctx, outboxMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOutboxMessageRepository)(nil).Insert), ctx, outboxMessage)
}

// List mocks base method.
func (m *MockOutboxMessageRepository) List(ctx context.Context, filter repositories.OutboxMessageFilter) ([]*repositories.OutboxMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.OutboxMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOutboxMessageRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOutboxMessageRepository)(nil).List), ctx, filter)
}
