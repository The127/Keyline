// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/repositories (interfaces: ApplicationUserMetadataRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/application_user_metadata_repository.go -package=mocks Keyline/internal/repositories ApplicationUserMetadataRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApplicationUserMetadataRepository is a mock of ApplicationUserMetadataRepository interface.
type MockApplicationUserMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationUserMetadataRepositoryMockRecorder
	isgomock struct{}
}

// MockApplicationUserMetadataRepositoryMockRecorder is the mock recorder for MockApplicationUserMetadataRepository.
type MockApplicationUserMetadataRepositoryMockRecorder struct {
	mock *MockApplicationUserMetadataRepository
}

// NewMockApplicationUserMetadataRepository creates a new mock instance.
func NewMockApplicationUserMetadataRepository(ctrl *gomock.Controller) *MockApplicationUserMetadataRepository {
	mock := &MockApplicationUserMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationUserMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationUserMetadataRepository) EXPECT() *MockApplicationUserMetadataRepositoryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockApplicationUserMetadataRepository) List(ctx context.Context, filter repositories.ApplicationUserMetadataFilter) ([]*repositories.ApplicationUserMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.ApplicationUserMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockApplicationUserMetadataRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockApplicationUserMetadataRepository)(nil).List), ctx, filter)
}
