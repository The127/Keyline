// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/repositories (interfaces: CredentialRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/credential_repository.go -package=mocks Keyline/repositories CredentialRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredentialRepository is a mock of CredentialRepository interface.
type MockCredentialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialRepositoryMockRecorder
	isgomock struct{}
}

// MockCredentialRepositoryMockRecorder is the mock recorder for MockCredentialRepository.
type MockCredentialRepositoryMockRecorder struct {
	mock *MockCredentialRepository
}

// NewMockCredentialRepository creates a new mock instance.
func NewMockCredentialRepository(ctrl *gomock.Controller) *MockCredentialRepository {
	mock := &MockCredentialRepository{ctrl: ctrl}
	mock.recorder = &MockCredentialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialRepository) EXPECT() *MockCredentialRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockCredentialRepository) First(ctx context.Context, filter repositories.CredentialFilter) (*repositories.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", ctx, filter)
	ret0, _ := ret[0].(*repositories.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockCredentialRepositoryMockRecorder) First(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockCredentialRepository)(nil).First), ctx, filter)
}

// Insert mocks base method.
func (m *MockCredentialRepository) Insert(ctx context.Context, credential *repositories.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCredentialRepositoryMockRecorder) Insert(ctx, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCredentialRepository)(nil).Insert), ctx, credential)
}

// List mocks base method.
func (m *MockCredentialRepository) List(ctx context.Context, filter repositories.CredentialFilter) ([]*repositories.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCredentialRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCredentialRepository)(nil).List), ctx, filter)
}

// Single mocks base method.
func (m *MockCredentialRepository) Single(ctx context.Context, filter repositories.CredentialFilter) (*repositories.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx, filter)
	ret0, _ := ret[0].(*repositories.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockCredentialRepositoryMockRecorder) Single(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockCredentialRepository)(nil).Single), ctx, filter)
}

// Update mocks base method.
func (m *MockCredentialRepository) Update(ctx context.Context, credential *repositories.Credential) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, credential)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCredentialRepositoryMockRecorder) Update(ctx, credential any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCredentialRepository)(nil).Update), ctx, credential)
}
