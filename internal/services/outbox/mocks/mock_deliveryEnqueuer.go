// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/services/outbox (interfaces: DeliveryEnqueuer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_deliveryEnqueuer.go -package=mocks . DeliveryEnqueuer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeliveryEnqueuer is a mock of DeliveryEnqueuer interface.
type MockDeliveryEnqueuer struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryEnqueuerMockRecorder
	isgomock struct{}
}

// MockDeliveryEnqueuerMockRecorder is the mock recorder for MockDeliveryEnqueuer.
type MockDeliveryEnqueuerMockRecorder struct {
	mock *MockDeliveryEnqueuer
}

// NewMockDeliveryEnqueuer creates a new mock instance.
func NewMockDeliveryEnqueuer(ctrl *gomock.Controller) *MockDeliveryEnqueuer {
	mock := &MockDeliveryEnqueuer{ctrl: ctrl}
	mock.recorder = &MockDeliveryEnqueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryEnqueuer) EXPECT() *MockDeliveryEnqueuerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockDeliveryEnqueuer) Enqueue(ctx context.Context, message *repositories.OutboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockDeliveryEnqueuerMockRecorder) Enqueue(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockDeliveryEnqueuer)(nil).Enqueue), ctx, message)
}
