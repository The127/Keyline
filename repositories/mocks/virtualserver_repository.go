// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/repositories (interfaces: VirtualServerRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/virtualserver_repository.go -package=mocks Keyline/repositories VirtualServerRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVirtualServerRepository is a mock of VirtualServerRepository interface.
type MockVirtualServerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualServerRepositoryMockRecorder
	isgomock struct{}
}

// MockVirtualServerRepositoryMockRecorder is the mock recorder for MockVirtualServerRepository.
type MockVirtualServerRepositoryMockRecorder struct {
	mock *MockVirtualServerRepository
}

// NewMockVirtualServerRepository creates a new mock instance.
func NewMockVirtualServerRepository(ctrl *gomock.Controller) *MockVirtualServerRepository {
	mock := &MockVirtualServerRepository{ctrl: ctrl}
	mock.recorder = &MockVirtualServerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualServerRepository) EXPECT() *MockVirtualServerRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockVirtualServerRepository) First(ctx context.Context, filter repositories.VirtualServerFilter) (*repositories.VirtualServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", ctx, filter)
	ret0, _ := ret[0].(*repositories.VirtualServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockVirtualServerRepositoryMockRecorder) First(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockVirtualServerRepository)(nil).First), ctx, filter)
}

// Insert mocks base method.
func (m *MockVirtualServerRepository) Insert(ctx context.Context, virtualServer *repositories.VirtualServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, virtualServer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockVirtualServerRepositoryMockRecorder) Insert(ctx, virtualServer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockVirtualServerRepository)(nil).Insert), ctx, virtualServer)
}

// Single mocks base method.
func (m *MockVirtualServerRepository) Single(ctx context.Context, filter repositories.VirtualServerFilter) (*repositories.VirtualServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx, filter)
	ret0, _ := ret[0].(*repositories.VirtualServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockVirtualServerRepositoryMockRecorder) Single(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockVirtualServerRepository)(nil).Single), ctx, filter)
}
