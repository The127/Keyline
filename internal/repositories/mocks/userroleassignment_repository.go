// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/repositories (interfaces: UserRoleAssignmentRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/userroleassignment_repository.go -package=mocks Keyline/internal/repositories UserRoleAssignmentRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRoleAssignmentRepository is a mock of UserRoleAssignmentRepository interface.
type MockUserRoleAssignmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRoleAssignmentRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRoleAssignmentRepositoryMockRecorder is the mock recorder for MockUserRoleAssignmentRepository.
type MockUserRoleAssignmentRepositoryMockRecorder struct {
	mock *MockUserRoleAssignmentRepository
}

// NewMockUserRoleAssignmentRepository creates a new mock instance.
func NewMockUserRoleAssignmentRepository(ctrl *gomock.Controller) *MockUserRoleAssignmentRepository {
	mock := &MockUserRoleAssignmentRepository{ctrl: ctrl}
	mock.recorder = &MockUserRoleAssignmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRoleAssignmentRepository) EXPECT() *MockUserRoleAssignmentRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockUserRoleAssignmentRepository) Insert(ctx context.Context, userRoleAssignment *repositories.UserRoleAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, userRoleAssignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRoleAssignmentRepositoryMockRecorder) Insert(ctx, userRoleAssignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRoleAssignmentRepository)(nil).Insert), ctx, userRoleAssignment)
}

// List mocks base method.
func (m *MockUserRoleAssignmentRepository) List(ctx context.Context, filter repositories.UserRoleAssignmentFilter) ([]*repositories.UserRoleAssignment, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.UserRoleAssignment)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUserRoleAssignmentRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRoleAssignmentRepository)(nil).List), ctx, filter)
}
