name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write

jobs:
  signoff:
    name: Check commit sign-offs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for Signed-off-by lines
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          echo "Checking commits for Signed-off-by lines..."

          # Get the list of commit authors
          AUTHORS=$(git log origin/main..HEAD --pretty="%an <%ae>")
          echo "Commit authors:"
          echo "$AUTHORS"

          # Check if all commits are from Copilot bot
          if echo "$AUTHORS" | grep -qv "copilot-swe-agent\[bot\]"; then
            # Not all commits are from Copilot, check for sign-offs
            if ! git log origin/main..HEAD --pretty=%B | grep -q "Signed-off-by"; then
              echo "Commit(s) missing Signed-off-by line."
              echo "Please add it using:"
              echo "   git commit --amend --signoff"
              echo "   or"
              echo "   git commit -s"
              exit 1
            fi
            echo "All commits are signed off."
          else
            echo "All commits are from Copilot bot - skipping sign-off check."
          fi

  lint:
    runs-on: ubuntu-latest
    needs: [signoff]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Run golangci-lint (v2)
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1.6

  test:
    runs-on: ubuntu-latest
    needs: [signoff]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Run unit tests
        run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    needs: [signoff]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Build binary
        run: go build ./...

  integration-tests:
    runs-on: ubuntu-latest
    needs: [lint, test, build]

    services:
      postgres:
        image: postgres:15
        ports:
          - 5732:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Run integration tests
        run: go test -v ./tests/integration/... -tags=integration

  e2e-tests:
    runs-on: ubuntu-latest
    needs: integration-tests

    services:
      postgres:
        image: postgres:15
        ports:
          - 5732:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.24"

      - name: Run e2e tests
        run: go test -v ./tests/e2e/... -tags=e2e

  container-build:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push dev image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Containerfile
          push: true
          tags: |
            ghcr.io/the127/keyline:latest
            ghcr.io/the127/keyline:dev-${{ github.run_number }}
            ghcr.io/the127/keyline:dev-${{ github.sha }}

  cleanup-old-dev-builds:
    runs-on: ubuntu-latest
    needs: container-build
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
    steps:
      - name: Delete old dev build images
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          package: keyline
          owner: The127
          keep-n-tagged: 10
          exclude-tags: latest,v*
          older-than: 7 days
