// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/repositories (interfaces: UserRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/user_repository.go -package=mocks Keyline/repositories UserRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockUserRepository) First(ctx context.Context, filter repositories.UserFilter) (*repositories.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", ctx, filter)
	ret0, _ := ret[0].(*repositories.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockUserRepositoryMockRecorder) First(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockUserRepository)(nil).First), ctx, filter)
}

// Insert mocks base method.
func (m *MockUserRepository) Insert(ctx context.Context, user *repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepositoryMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepository)(nil).Insert), ctx, user)
}

// List mocks base method.
func (m *MockUserRepository) List(ctx context.Context, filter repositories.UserFilter) ([]*repositories.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUserRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepository)(nil).List), ctx, filter)
}

// Single mocks base method.
func (m *MockUserRepository) Single(ctx context.Context, filter repositories.UserFilter) (*repositories.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx, filter)
	ret0, _ := ret[0].(*repositories.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockUserRepositoryMockRecorder) Single(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockUserRepository)(nil).Single), ctx, filter)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *repositories.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}
