// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/repositories (interfaces: FileRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/file_repository.go -package=mocks Keyline/repositories FileRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	"Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockFileRepository) First(ctx context.Context, filter repositories.FileFilter) (*repositories.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", ctx, filter)
	ret0, _ := ret[0].(*repositories.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockFileRepositoryMockRecorder) First(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockFileRepository)(nil).First), ctx, filter)
}

// Insert mocks base method.
func (m *MockFileRepository) Insert(ctx context.Context, file *repositories.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockFileRepositoryMockRecorder) Insert(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockFileRepository)(nil).Insert), ctx, file)
}

// Single mocks base method.
func (m *MockFileRepository) Single(ctx context.Context, filter repositories.FileFilter) (*repositories.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx, filter)
	ret0, _ := ret[0].(*repositories.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockFileRepositoryMockRecorder) Single(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockFileRepository)(nil).Single), ctx, filter)
}
