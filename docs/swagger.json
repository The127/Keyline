{
    "swagger": "2.0",
    "info": {
        "description": "Open source OIDC/IDP server.",
        "title": "Keyline API",
        "contact": {}
    },
    "basePath": "/",
    "paths": {
        "/api/virtual-servers": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create virtual server",
                "parameters": [
                    {
                        "description": "Virtual server",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateVirtualSeverRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get virtual server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetVirtualServerResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/health": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Virtual server health",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/public-info": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get virtual server public info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetVirtualServerListResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/roles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of roles within a virtual server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field (e.g., name, createdAt)",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order direction (asc|desc)",
                        "name": "orderDir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PagedRolesResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new role within a virtual server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRoleRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRoleResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/roles/{roleId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a role by its ID within a virtual server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Get role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID (UUID)",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetRoleByIdResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/roles/{roleId}/assign": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assign an existing role to a user within a virtual server.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Assign role to user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role ID (UUID)",
                        "name": "roleId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Assignment data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AssignRoleRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/templates": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Templates"
                ],
                "summary": "List templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PagedTemplatesResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/templates/{templateType}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Templates"
                ],
                "summary": "Get template",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Template type",
                        "name": "templateType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetTemplateResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/users": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PagedUsersResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/users/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterUserRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/users/verify-email": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Verification token",
                        "name": "token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to frontend confirmation page",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{virtualServerName}/users/{userId}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetUserByIdResponseDto"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Patch user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID (UUID)",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patch document",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PatchUserRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/virtual-servers/{vsName}/applications": {
            "get": {
                "description": "Retrieve a paginated list of applications (OIDC clients)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "List applications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Server Name",
                        "name": "vsName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order by field",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order direction (asc|desc)",
                        "name": "orderDir",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PagedApplicationsResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Create a new OIDC application/client with redirect URIs and type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Create application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Server Name",
                        "name": "vsName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Application data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateApplicationRequestDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateApplicationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/virtual-servers/{vsName}/applications/{appId}": {
            "get": {
                "description": "Get an application by ID from a virtual server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Get application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual Server Name",
                        "name": "vsName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Application ID (UUID)",
                        "name": "appId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetApplicationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Application not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/debug": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Debug"
                ],
                "summary": "Debug email template render",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/debug/vars": {
            "get": {
                "description": "Exposes runtime/app stats (Go's expvar) as JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Debug"
                ],
                "summary": "Expvar variables",
                "responses": {
                    "200": {
                        "description": "expvar JSON",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Application health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Get login state",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.GetLoginStateResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unknown/invalid token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}/finish-login": {
            "post": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Finish login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to original URL",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or wrong step",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}/resend-email-verification": {
            "post": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Resend email verification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or wrong step",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}/reset-temporary-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Reset temporary password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New password",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ResetTemporaryPasswordRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or wrong step",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}/verify-email": {
            "post": {
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Verify email token (advance state)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or wrong step",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/logins/{loginToken}/verify-password": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Logins"
                ],
                "summary": "Verify password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Login session token",
                        "name": "loginToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyPasswordRequestDto"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or wrong step",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Exposes Prometheus metrics in text exposition format.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Monitoring"
                ],
                "summary": "Prometheus metrics",
                "responses": {
                    "200": {
                        "description": "Prometheus exposition format (text/plain; version=0.0.4)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/.well-known/jwks.json": {
            "get": {
                "description": "Returns the public keys used to verify tokens for this virtual server.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "JWKS for virtual server",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.JwksResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/.well-known/openid-configuration": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "OpenID Provider configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.OpenIdConfigurationResponseDto"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/authorize": {
            "get": {
                "description": "Starts the Authorization Code flow. If the user is not authenticated, redirects to your login UI; otherwise redirects to the application's redirect_uri with an authorization code.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Authorize",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Must be 'code'",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Application (client) ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Registered redirect URI",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Space-delimited scopes (must include 'openid')",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Opaque value returned to client",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g. 'query'",
                        "name": "response_mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "PKCE code challenge",
                        "name": "code_challenge",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "S256",
                            "plain"
                        ],
                        "type": "string",
                        "description": "S256 or plain",
                        "name": "code_challenge_method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to redirect_uri with code (\u0026 state)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Starts the Authorization Code flow. If the user is not authenticated, redirects to your login UI; otherwise redirects to the application's redirect_uri with an authorization code.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Authorize",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Must be 'code'",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Application (client) ID",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Registered redirect URI",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Space-delimited scopes (must include 'openid')",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Opaque value returned to client",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "e.g. 'query'",
                        "name": "response_mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "PKCE code challenge",
                        "name": "code_challenge",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "S256",
                            "plain"
                        ],
                        "type": "string",
                        "description": "S256 or plain",
                        "name": "code_challenge_method",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to redirect_uri with code (\u0026 state)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/end_session": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "End session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID token hint of the current session",
                        "name": "id_token_hint",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Where to redirect after logout (must be registered)",
                        "name": "post_logout_redirect_uri",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Opaque value returned to client",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirect to post_logout_redirect_uri",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/token": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Token endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "authorization_code | refresh_token",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Required when grant_type=authorization_code",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Required when grant_type=refresh_token",
                        "name": "refresh_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "If no Authorization header",
                        "name": "client_id",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When grant_type=refresh_token",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oidc/{virtualServerName}/userinfo": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OIDC"
                ],
                "summary": "Userinfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Virtual server name",
                        "name": "virtualServerName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.OidcUserInfoResponseDto"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.AssignRoleRequestDto": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "type": "string"
                }
            }
        },
        "handlers.CodeFlowResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateApplicationRequestDto": {
            "type": "object",
            "required": [
                "displayName",
                "name",
                "redirectUris",
                "type"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "postLogoutUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "public",
                        "confidential"
                    ]
                }
            }
        },
        "handlers.CreateApplicationResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateRoleRequestDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 1024
                },
                "maxTokenAge": {
                    "$ref": "#/definitions/jsonTypes.Duration"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "requireMfa": {
                    "type": "boolean"
                }
            }
        },
        "handlers.CreateRoleResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateVirtualSeverRequestDto": {
            "type": "object",
            "required": [
                "displayName",
                "name"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "enableRegistration": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "require2fa": {
                    "type": "boolean"
                },
                "signingAlgorithm": {
                    "type": "string",
                    "enum": [
                        "RS256",
                        "ECDSA"
                    ]
                }
            }
        },
        "handlers.GetApplicationResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.GetLoginStateResponseDto": {
            "type": "object",
            "properties": {
                "applicationDisplayName": {
                    "type": "string"
                },
                "signupEnabled": {
                    "type": "boolean"
                },
                "step": {
                    "description": "Step is one of: password_verification | temporary_password | email_verification | finish",
                    "type": "string"
                },
                "virtualServerDisplayName": {
                    "type": "string"
                },
                "virtualServerName": {
                    "type": "string"
                }
            }
        },
        "handlers.GetRoleByIdResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxTokenAge": {
                    "$ref": "#/definitions/jsonTypes.Duration"
                },
                "name": {
                    "type": "string"
                },
                "requireMfa": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.GetTemplateResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/repositories.TemplateType"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.GetUserByIdResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "primaryEmail": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.GetVirtualServerListResponseDto": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "registrationEnabled": {
                    "type": "boolean"
                }
            }
        },
        "handlers.GetVirtualServerResponseDto": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "registrationEnabled": {
                    "type": "boolean"
                },
                "require2fa": {
                    "type": "boolean"
                },
                "requireEmailVerification": {
                    "type": "boolean"
                },
                "signingAlgorithm": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.JwksResponseDto": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "handlers.ListApplicationsResponseDto": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handlers.ListRolesResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.ListTemplatesResponseDto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/repositories.TemplateType"
                }
            }
        },
        "handlers.ListUsersResponseDto": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "primaryEmail": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.OidcUserInfoResponseDto": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sub": {
                    "type": "string"
                }
            }
        },
        "handlers.OpenIdConfigurationResponseDto": {
            "type": "object",
            "properties": {
                "authorization_endpoint": {
                    "type": "string"
                },
                "claims_supported": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "end_session_endpoint": {
                    "type": "string"
                },
                "id_token_signing_alg_values_supported": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuer": {
                    "type": "string"
                },
                "jwks_uri": {
                    "type": "string"
                },
                "response_types_supported": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes_supported": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject_types_supported": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_endpoint": {
                    "type": "string"
                },
                "userinfo_endpoint": {
                    "type": "string"
                }
            }
        },
        "handlers.PagedApplicationsResponseDto": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ListApplicationsResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.Pagination"
                }
            }
        },
        "handlers.PagedRolesResponseDto": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ListRolesResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.Pagination"
                }
            }
        },
        "handlers.PagedTemplatesResponseDto": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ListTemplatesResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.Pagination"
                }
            }
        },
        "handlers.PagedUsersResponseDto": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.ListUsersResponseDto"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/handlers.Pagination"
                }
            }
        },
        "handlers.Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "totalItems": {
                    "type": "integer"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "handlers.PatchUserRequestDto": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterUserRequestDto": {
            "type": "object",
            "required": [
                "displayName",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "displayName": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                }
            }
        },
        "handlers.ResetTemporaryPasswordRequestDto": {
            "type": "object",
            "required": [
                "newPassword"
            ],
            "properties": {
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyPasswordRequestDto": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "jsonTypes.Duration": {
            "type": "object",
            "properties": {
                "time.Duration": {
                    "type": "integer",
                    "format": "int64",
                    "enum": [
                        -9223372036854775808,
                        9223372036854775807,
                        1,
                        1000,
                        1000000,
                        1000000000,
                        60000000000,
                        3600000000000,
                        -9223372036854775808,
                        9223372036854775807,
                        1,
                        1000,
                        1000000,
                        1000000000,
                        60000000000,
                        3600000000000
                    ],
                    "x-enum-varnames": [
                        "minDuration",
                        "maxDuration",
                        "Nanosecond",
                        "Microsecond",
                        "Millisecond",
                        "Second",
                        "Minute",
                        "Hour",
                        "minDuration",
                        "maxDuration",
                        "Nanosecond",
                        "Microsecond",
                        "Millisecond",
                        "Second",
                        "Minute",
                        "Hour"
                    ]
                }
            }
        },
        "repositories.TemplateType": {
            "type": "string",
            "enum": [
                "email_verification"
            ],
            "x-enum-varnames": [
                "EmailVerificationMailTemplate"
            ]
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}