// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/mediator (interfaces: Mediator)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mediator.go -package=mocks Keyline/mediator Mediator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMediator is a mock of Mediator interface.
type MockMediator struct {
	ctrl     *gomock.Controller
	recorder *MockMediatorMockRecorder
	isgomock struct{}
}

// MockMediatorMockRecorder is the mock recorder for MockMediator.
type MockMediatorMockRecorder struct {
	mock *MockMediator
}

// NewMockMediator creates a new mock instance.
func NewMockMediator(ctrl *gomock.Controller) *MockMediator {
	mock := &MockMediator{ctrl: ctrl}
	mock.recorder = &MockMediatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediator) EXPECT() *MockMediatorMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMediator) Send(ctx context.Context, request any, requestType, responseType reflect.Type) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request, requestType, responseType)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMediatorMockRecorder) Send(ctx, request, requestType, responseType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMediator)(nil).Send), ctx, request, requestType, responseType)
}

// SendEvent mocks base method.
func (m *MockMediator) SendEvent(ctx context.Context, evt any, eventType reflect.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", ctx, evt, eventType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockMediatorMockRecorder) SendEvent(ctx, evt, eventType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockMediator)(nil).SendEvent), ctx, evt, eventType)
}
