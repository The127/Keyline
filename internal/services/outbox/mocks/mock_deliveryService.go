// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/services/outbox (interfaces: DeliveryService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_deliveryService.go -package=mocks . DeliveryService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/internal/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDeliveryService is a mock of DeliveryService interface.
type MockDeliveryService struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryServiceMockRecorder
	isgomock struct{}
}

// MockDeliveryServiceMockRecorder is the mock recorder for MockDeliveryService.
type MockDeliveryServiceMockRecorder struct {
	mock *MockDeliveryService
}

// NewMockDeliveryService creates a new mock instance.
func NewMockDeliveryService(ctrl *gomock.Controller) *MockDeliveryService {
	mock := &MockDeliveryService{ctrl: ctrl}
	mock.recorder = &MockDeliveryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryService) EXPECT() *MockDeliveryServiceMockRecorder {
	return m.recorder
}

// Deliver mocks base method.
func (m *MockDeliveryService) Deliver(ctx context.Context, message *repositories.OutboxMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deliver", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deliver indicates an expected call of Deliver.
func (mr *MockDeliveryServiceMockRecorder) Deliver(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deliver", reflect.TypeOf((*MockDeliveryService)(nil).Deliver), ctx, message)
}
