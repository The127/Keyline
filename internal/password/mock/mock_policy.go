// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/internal/password (interfaces: Policy)
//
// Generated by this command:
//
//	mockgen -destination=./mock/mock_policy.go -package=mock . Policy
//

// Package mock is a generated GoMock package.
package mock

import (
	repositories "Keyline/internal/repositories"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
	isgomock struct{}
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// GetPasswordRuleType mocks base method.
func (m *MockPolicy) GetPasswordRuleType() repositories.PasswordRuleType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPasswordRuleType")
	ret0, _ := ret[0].(repositories.PasswordRuleType)
	return ret0
}

// GetPasswordRuleType indicates an expected call of GetPasswordRuleType.
func (mr *MockPolicyMockRecorder) GetPasswordRuleType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPasswordRuleType", reflect.TypeOf((*MockPolicy)(nil).GetPasswordRuleType))
}

// Serialize mocks base method.
func (m *MockPolicy) Serialize() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockPolicyMockRecorder) Serialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockPolicy)(nil).Serialize))
}

// Validate mocks base method.
func (m *MockPolicy) Validate(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockPolicyMockRecorder) Validate(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockPolicy)(nil).Validate), password)
}
