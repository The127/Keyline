// Code generated by MockGen. DO NOT EDIT.
// Source: Keyline/repositories (interfaces: TemplateRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/template_repository.go -package=mocks Keyline/repositories TemplateRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	repositories "Keyline/repositories"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTemplateRepository is a mock of TemplateRepository interface.
type MockTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRepositoryMockRecorder
	isgomock struct{}
}

// MockTemplateRepositoryMockRecorder is the mock recorder for MockTemplateRepository.
type MockTemplateRepositoryMockRecorder struct {
	mock *MockTemplateRepository
}

// NewMockTemplateRepository creates a new mock instance.
func NewMockTemplateRepository(ctrl *gomock.Controller) *MockTemplateRepository {
	mock := &MockTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRepository) EXPECT() *MockTemplateRepositoryMockRecorder {
	return m.recorder
}

// First mocks base method.
func (m *MockTemplateRepository) First(ctx context.Context, filter repositories.TemplateFilter) (*repositories.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First", ctx, filter)
	ret0, _ := ret[0].(*repositories.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockTemplateRepositoryMockRecorder) First(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockTemplateRepository)(nil).First), ctx, filter)
}

// Insert mocks base method.
func (m *MockTemplateRepository) Insert(ctx context.Context, template *repositories.Template) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTemplateRepositoryMockRecorder) Insert(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTemplateRepository)(nil).Insert), ctx, template)
}

// List mocks base method.
func (m *MockTemplateRepository) List(ctx context.Context, filter repositories.TemplateFilter) ([]*repositories.Template, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]*repositories.Template)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTemplateRepositoryMockRecorder) List(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTemplateRepository)(nil).List), ctx, filter)
}

// Single mocks base method.
func (m *MockTemplateRepository) Single(ctx context.Context, filter repositories.TemplateFilter) (*repositories.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Single", ctx, filter)
	ret0, _ := ret[0].(*repositories.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Single indicates an expected call of Single.
func (mr *MockTemplateRepositoryMockRecorder) Single(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Single", reflect.TypeOf((*MockTemplateRepository)(nil).Single), ctx, filter)
}
